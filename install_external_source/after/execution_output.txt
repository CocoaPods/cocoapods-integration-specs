CP_AGGRESSIVE_CACHE=TRUE XCODEPROJ_DISABLE_XCPROJ=TRUE CLAIDE_DISABLE_AUTO_WRAP=TRUE pod install --no-repo-update --verbose --no-ansi 2>&1
  Preparing

Analyzing dependencies

Inspecting targets to integrate
  Using `ARCHS` setting to build architectures of target `Pods`: (`$(ARCHS_STANDARD_64_BIT)`)

Fetching external sources
-> Pre-downloading: `PodTest` from `PodTest-hg-source`
 > Mercurial download
   $ /usr/local/bin/hg clone PodTest-hg-source ROOT/tmp/install_external_source/Pods/PodTest
   updating to branch default
   5 files updated, 0 files merged, 0 files removed, 0 files unresolved

Resolving dependencies of `Podfile`

Comparing resolved specification to the sandbox manifest
  A PodTest

Downloading dependencies

-> Installing PodTest (1.0)
  - Running pre install hooks

Generating Pods project
  - Creating Pods project
  - Adding source files to Pods project
  - Adding frameworks to Pods project
  - Adding libraries to Pods project
  - Adding resources to Pods project
  - Linking headers
  - Installing targets
    - Installing target `Pods-PodTest` iOS 4.3
    - Installing target `Pods` iOS 4.3
  - Running post install hooks
  - Writing Xcode project file to `Pods/Pods.xcodeproj`
  - Writing Lockfile in `Podfile.lock`
  - Writing Manifest in `Pods/Manifest.lock`

Integrating client project

[!] From now on use `SampleApp.xcworkspace`.

Integrating target `Pods` (`SampleApp.xcodeproj` project)

[!] The use of implicit sources has been deprecated. To continue using all of the sources currently on your machine, add the following to the top of your Podfile:

    source 'https://github.com/CocoaPods/Specs.git'

[!] The `iOS App [Release]` target overrides the `OTHER_CFLAGS` build setting defined in `Pods/Target Support Files/Pods/Pods.release.xcconfig'. This can lead to problems with the CocoaPods installation
    - Use the `$(inherited)` flag, or
    - Remove the build settings from the target.
